import { NextApiRequest, NextApiResponse } from 'next';
import { getServerSession } from 'next-auth/next';
import {
  getOrCreateChatConversation,
  addChatMessage,
  getChatConversationMessages,
  getChatConversationById
} from '@saasfly/db';
import { Session } from 'next-auth';

// Mock auth options until the NextAuth configuration is properly set up
const authOptions = {
  providers: [],
  callbacks: {
    session: async ({ session, token }: { session: Session; token: any }) => {
      if (session?.user) {
        session.user.id = token.sub;
      }
      return session;
    }
  }
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getServerSession(req, res, authOptions);

  if (!session || !session.user) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const userId = session.user.id;

  if (!userId) {
    return res.status(401).json({ error: 'Invalid session' });
  }

  // Handle different HTTP methods
  try {
    switch (req.method) {
      case 'POST':
        return await handleSendMessageToAI(req, res, userId);
      case 'GET':
        return await handleGetAIConversation(req, res, userId);
      default:
        return res.status(405).json({ error: 'Method not allowed' });
    }
  } catch (error) {
    console.error('Error with AI conversation:', error);
    return res.status(500).json({ 
      error: 'An error occurred while processing the AI conversation request'
    });
  }
}

// POST: Send a message to the AI assistant
async function handleSendMessageToAI(
  req: NextApiRequest,
  res: NextApiResponse,
  userId: string
) {
  const { message, conversationId, category } = req.body;

  if (!message) {
    return res.status(400).json({ error: 'Message is required' });
  }

  try {
    // Get or create an AI conversation
    const conversation = conversationId 
      ? await getChatConversationById(conversationId)
      : await getOrCreateChatConversation(userId, category || 'general');

    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found' });
    }

    // Add user message to the conversation
    const userMessage = await addChatMessage(
      conversation.id,
      userId,
      message
    );

    // In a real implementation, you would send the message to an AI service
    // and get a response. For now, we'll return a placeholder response.
    const aiResponse = "This is a placeholder AI response. In a real implementation, this would be generated by an AI service based on your message.";

    // Add AI assistant's response
    const assistantMessage = await addChatMessage(
      conversation.id,
      'ai-assistant', // Use a specific ID for the AI
      aiResponse
    );

    return res.status(200).json({
      success: true,
      conversation,
      userMessage,
      assistantMessage
    });
  } catch (error) {
    console.error('Error sending message to AI:', error);
    return res.status(500).json({ 
      error: 'An error occurred while sending message to AI'
    });
  }
}

// GET: Get AI conversation history
async function handleGetAIConversation(
  req: NextApiRequest,
  res: NextApiResponse,
  userId: string
) {
  const { conversationId } = req.query;

  if (!conversationId || typeof conversationId !== 'string') {
    return res.status(400).json({ error: 'Conversation ID is required' });
  }

  try {
    // Get conversation details
    const conversation = await getChatConversationById(conversationId);
    
    if (!conversation) {
      return res.status(404).json({ error: 'Conversation not found' });
    }

    // Get messages for this conversation
    const messages = await getChatConversationMessages(conversationId);

    return res.status(200).json({
      success: true,
      conversation,
      messages
    });
  } catch (error) {
    console.error('Error getting AI conversation:', error);
    return res.status(500).json({ 
      error: 'An error occurred while retrieving AI conversation'
    });
  }
}
